#!/usr/bin/env python

"""
Site'N'Co
=========

Simple websites for simple projects.

"""

import os
import json
import csstyle
import docutils
import werkzeug
import mimetypes
import xml.etree.ElementTree as ET
from datetime import datetime
from flask import Flask, Response, g, render_template, request
from kalamar.access_point import NotOneMatchingItem

import kalamarsite
import helpers

SITE_ROOT = os.path.dirname(os.path.abspath(__file__))
PATH = os.path.join(SITE_ROOT, 'projects')
SITE = kalamarsite.create_site(PATH)
CONFIG = {
    project: json.load(open(os.path.join(PATH, project, 'configuration')))
    for project in os.listdir(PATH) if not project.startswith('.')}

app = Flask(__name__)


def _static(filename, mimetype=None):
    """Get a response wrapping the file called filename."""
    fullpath = os.path.join(SITE_ROOT, filename)
    if not os.path.isfile(fullpath):
        raise werkzeug.exceptions.NotFound
    wrapped_file = werkzeug.wrap_file(request.environ, open(fullpath))
    if not mimetype:
        mimetype = mimetypes.guess_type(filename)[0]
    return werkzeug.BaseResponse(
        wrapped_file, direct_passthrough=True, mimetype=mimetype)


def _open_or_404(page):
    """Return an item or raise 404."""
    try:
        return SITE.open('page', {'project': g.project_name, 'page': page})
    except NotOneMatchingItem:
        raise werkzeug.exceptions.NotFound



@app.before_request
def before_request():
    """Set variables before each request."""
    g.project_name = request.host.split('.')[-2]
    g.variables = CONFIG[g.project_name].copy()
    g.variables.update({'project_name': g.project_name, 'helpers': helpers})


@app.route('/static/<path:path>')
def static(path):
    """Static part of projects."""
    filename = os.path.join(PATH, g.project_name, 'static', path)
    return _static(filename)


@app.route('/src/<path:path>')
def src(path):
    """Commun static part of Site'n'Co for sources."""
    return _static(os.path.join('static', 'src', path))


@app.route('/css/csstyle.css')
def csstyle_stylesheet():
    """CSS stylesheet created by CSStyle."""
    local_filename = os.path.join('static', 'css', 'style.css')
    filenames = (
        os.path.join(SITE_ROOT, local_filename),
        os.path.join(PATH, g.project_name, local_filename))

    text = '/* Generated by CSStyle */\n\n'

    for filename in filenames:
        text += open(filename).read()

    for engine in csstyle.BROWSERS:
        browser_parser = getattr(csstyle, engine)
        parser = csstyle.Parser(filenames)
        text += '\n\n/* CSS for %s */\n\n' % engine
        text += repr(browser_parser.transform(parser, keep_existant=False))

    return Response(text, mimetype='text/css')


@app.route('/css/<path:path>')
def css_static_files(path):
    """CSS static files."""
    filenames = (
        os.path.join(PATH, g.project_name, 'static', 'css', path),
        os.path.join(SITE_ROOT, 'static', 'css', path))
    for filename in filenames:
        if os.path.isfile(filename):
            return _static(filename)
    raise werkzeug.exceptions.NotFound


@app.route('/rss')
def rss():
    """RSS feed."""
    news_items = SITE.search('news', {'project': g.project_name})
    ordered_news = {}
    for new in news_items:
        ordered_news[new['datetime']] = new

    tree = ET.Element('rss', {'version': '2.0'})
    channel = ET.Element('channel')
    tree.append(channel)
    title = ET.Element('title')
    title.text = '%s - %s' % (
        g.variables['name'], g.variables['description'])
    channel.append(title)
    description = ET.Element('description')
    description.text = u'News from %s' % g.variables['name']
    channel.append(description)
    link = ET.Element('link')
    link.text = request.host_url
    channel.append(link)

    for date, new in sorted(ordered_news.items(), reverse=True):
        id_string = new['datetime']
        url = "%snews#%s" % (request.host_url, id_string)
        item = ET.Element('item')
        channel.append(item)
        title = ET.Element('title')
        title.text = new['title']
        item.append(title)
        guid = ET.Element('guid')
        guid.text = str(hash(new))
        item.append(guid)
        date = ET.Element('pubDate')
        date.text = datetime.strptime(
            new['datetime'], '%Y-%m-%d@%H:%M:%S').strftime(
            '%a, %d %b %Y %H:%M:%S +0000')
        item.append(date)
        link = ET.Element('link')
        link.text = url
        item.append(link)

        parts = docutils.core.publish_parts(
            source=new['content'].read(),
            writer=docutils.writers.html4css1.Writer(),
            settings_overrides={'initial_header_level': 2, 'doctitle_xform': 0})
        description_text = parts['fragment']
        description = ET.Element('description')
        description.text = description_text
        item.append(description)

    return Response(ET.tostring(tree, 'utf-8'), mimetype='application/rss+xml')


@app.route('/news')
def news():
    """News."""
    news_items = SITE.search('news', {'project': g.project_name})
    g.variables.update({'page_title': 'News', 'news': news_items})
    return render_template('news.html.jinja2', **g.variables)


@app.route('/tutorials/<string:tutorial>')
def tutorial(tuto):
    """Tutorial."""
    item = _open_or_404(
        'tutorial', {'project': g.project_name, 'tutorial': tuto})
    filename = os.path.join(
        PATH, g.project_name, 'tutorials', '%s.html' % tuto)
    if os.path.isfile(filename):
        return _static(filename, 'text/html')

    g.variables.update({'page_title': item['title'], 'tutorial': item})
    response = render_template('tutorial.html.jinja2', **g.variables)

    with open(filename, 'w') as stream:
        stream.write(response.data)

    return response


@app.route('/tutorials')
def tutorials():
    """Tutorials."""
    tutorials_items = SITE.search('tutorial', {'project': g.project_name})
    g.variables.update(
        {'page_title': 'Tutorials', 'tutorials': tutorials_items})
    return render_template('tutorials.html.jinja2', **g.variables)


@app.route('/')
@app.route('/<path:page>')
def default(page='home'):
    """Default page."""
    item = _open_or_404(page)
    g.variables.update({'page': item, 'page_title': item['title']})
    return render_template('page.html.jinja2', **g.variables)


if __name__ == '__main__':
    app.run(host='0.0.0.0', debug=True)
